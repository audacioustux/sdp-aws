// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from '@pulumi/pulumi'
import * as inputs from '../types/input'
import * as outputs from '../types/output'

import { ObjectMeta } from '../meta/v1'

export namespace argoproj {
  export namespace v1alpha1 {
    /**
     * AppProjectSpec is the specification of an AppProject
     */
    export interface AppProjectSpecArgs {
      /**
       * ClusterResourceBlacklist contains list of blacklisted cluster level resources
       */
      clusterResourceBlacklist?: pulumi.Input<
        pulumi.Input<inputs.argoproj.v1alpha1.AppProjectSpecClusterResourceBlacklistArgs>[]
      >
      /**
       * ClusterResourceWhitelist contains list of whitelisted cluster level resources
       */
      clusterResourceWhitelist?: pulumi.Input<
        pulumi.Input<inputs.argoproj.v1alpha1.AppProjectSpecClusterResourceWhitelistArgs>[]
      >
      /**
       * Description contains optional project description
       */
      description?: pulumi.Input<string>
      /**
       * Destinations contains list of destinations available for deployment
       */
      destinations?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.AppProjectSpecDestinationsArgs>[]>
      /**
       * NamespaceResourceBlacklist contains list of blacklisted namespace level resources
       */
      namespaceResourceBlacklist?: pulumi.Input<
        pulumi.Input<inputs.argoproj.v1alpha1.AppProjectSpecNamespaceResourceBlacklistArgs>[]
      >
      /**
       * NamespaceResourceWhitelist contains list of whitelisted namespace level resources
       */
      namespaceResourceWhitelist?: pulumi.Input<
        pulumi.Input<inputs.argoproj.v1alpha1.AppProjectSpecNamespaceResourceWhitelistArgs>[]
      >
      /**
       * OrphanedResources specifies if controller should monitor orphaned resources of apps in this project
       */
      orphanedResources?: pulumi.Input<inputs.argoproj.v1alpha1.AppProjectSpecOrphanedResourcesArgs>
      /**
       * PermitOnlyProjectScopedClusters determines whether destinations can only reference clusters which are project-scoped
       */
      permitOnlyProjectScopedClusters?: pulumi.Input<boolean>
      /**
       * Roles are user defined RBAC roles associated with this project
       */
      roles?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.AppProjectSpecRolesArgs>[]>
      /**
       * SignatureKeys contains a list of PGP key IDs that commits in Git must be signed with in order to be allowed for sync
       */
      signatureKeys?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.AppProjectSpecSignatureKeysArgs>[]>
      /**
       * SourceNamespaces defines the namespaces application resources are allowed to be created in
       */
      sourceNamespaces?: pulumi.Input<pulumi.Input<string>[]>
      /**
       * SourceRepos contains list of repository URLs which can be used for deployment
       */
      sourceRepos?: pulumi.Input<pulumi.Input<string>[]>
      /**
       * SyncWindows controls when syncs can be run for apps in this project
       */
      syncWindows?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.AppProjectSpecSyncWindowsArgs>[]>
    }

    /**
     * GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
     */
    export interface AppProjectSpecClusterResourceBlacklistArgs {
      group: pulumi.Input<string>
      kind: pulumi.Input<string>
    }

    /**
     * GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
     */
    export interface AppProjectSpecClusterResourceWhitelistArgs {
      group: pulumi.Input<string>
      kind: pulumi.Input<string>
    }

    /**
     * ApplicationDestination holds information about the application's destination
     */
    export interface AppProjectSpecDestinationsArgs {
      /**
       * Name is an alternate way of specifying the target cluster by its symbolic name. This must be set if Server is not set.
       */
      name?: pulumi.Input<string>
      /**
       * Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace
       */
      namespace?: pulumi.Input<string>
      /**
       * Server specifies the URL of the target cluster's Kubernetes control plane API. This must be set if Name is not set.
       */
      server?: pulumi.Input<string>
    }

    /**
     * GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
     */
    export interface AppProjectSpecNamespaceResourceBlacklistArgs {
      group: pulumi.Input<string>
      kind: pulumi.Input<string>
    }

    /**
     * GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
     */
    export interface AppProjectSpecNamespaceResourceWhitelistArgs {
      group: pulumi.Input<string>
      kind: pulumi.Input<string>
    }

    /**
     * OrphanedResources specifies if controller should monitor orphaned resources of apps in this project
     */
    export interface AppProjectSpecOrphanedResourcesArgs {
      /**
       * Ignore contains a list of resources that are to be excluded from orphaned resources monitoring
       */
      ignore?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.AppProjectSpecOrphanedResourcesIgnoreArgs>[]>
      /**
       * Warn indicates if warning condition should be created for apps which have orphaned resources
       */
      warn?: pulumi.Input<boolean>
    }

    /**
     * OrphanedResourceKey is a reference to a resource to be ignored from
     */
    export interface AppProjectSpecOrphanedResourcesIgnoreArgs {
      group?: pulumi.Input<string>
      kind?: pulumi.Input<string>
      name?: pulumi.Input<string>
    }

    /**
     * ProjectRole represents a role that has access to a project
     */
    export interface AppProjectSpecRolesArgs {
      /**
       * Description is a description of the role
       */
      description?: pulumi.Input<string>
      /**
       * Groups are a list of OIDC group claims bound to this role
       */
      groups?: pulumi.Input<pulumi.Input<string>[]>
      /**
       * JWTTokens are a list of generated JWT tokens bound to this role
       */
      jwtTokens?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.AppProjectSpecRolesJwtTokensArgs>[]>
      /**
       * Name is a name for this role
       */
      name: pulumi.Input<string>
      /**
       * Policies Stores a list of casbin formatted strings that define access policies for the role in the project
       */
      policies?: pulumi.Input<pulumi.Input<string>[]>
    }

    /**
     * JWTToken holds the issuedAt and expiresAt values of a token
     */
    export interface AppProjectSpecRolesJwtTokensArgs {
      exp?: pulumi.Input<number>
      iat: pulumi.Input<number>
      id?: pulumi.Input<string>
    }

    /**
     * SignatureKey is the specification of a key required to verify commit signatures with
     */
    export interface AppProjectSpecSignatureKeysArgs {
      /**
       * The ID of the key in hexadecimal notation
       */
      keyID: pulumi.Input<string>
    }

    /**
     * SyncWindow contains the kind, time, duration and attributes that are used to assign the syncWindows to apps
     */
    export interface AppProjectSpecSyncWindowsArgs {
      /**
       * Applications contains a list of applications that the window will apply to
       */
      applications?: pulumi.Input<pulumi.Input<string>[]>
      /**
       * Clusters contains a list of clusters that the window will apply to
       */
      clusters?: pulumi.Input<pulumi.Input<string>[]>
      /**
       * Duration is the amount of time the sync window will be open
       */
      duration?: pulumi.Input<string>
      /**
       * Kind defines if the window allows or blocks syncs
       */
      kind?: pulumi.Input<string>
      /**
       * ManualSync enables manual syncs when they would otherwise be blocked
       */
      manualSync?: pulumi.Input<boolean>
      /**
       * Namespaces contains a list of namespaces that the window will apply to
       */
      namespaces?: pulumi.Input<pulumi.Input<string>[]>
      /**
       * Schedule is the time the window will begin, specified in cron format
       */
      schedule?: pulumi.Input<string>
      /**
       * TimeZone of the sync that will be applied to the schedule
       */
      timeZone?: pulumi.Input<string>
    }

    /**
     * AppProjectStatus contains status information for AppProject CRs
     */
    export interface AppProjectStatusArgs {
      /**
       * JWTTokensByRole contains a list of JWT tokens issued for a given role
       */
      jwtTokensByRole?: pulumi.Input<{
        [key: string]: pulumi.Input<inputs.argoproj.v1alpha1.AppProjectStatusJwtTokensByRoleArgs>
      }>
    }

    /**
     * JWTTokens represents a list of JWT tokens
     */
    export interface AppProjectStatusJwtTokensByRoleArgs {
      items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.AppProjectStatusJwtTokensByRoleItemsArgs>[]>
    }

    /**
     * JWTToken holds the issuedAt and expiresAt values of a token
     */
    export interface AppProjectStatusJwtTokensByRoleItemsArgs {
      exp?: pulumi.Input<number>
      iat: pulumi.Input<number>
      id?: pulumi.Input<string>
    }
  }
}
